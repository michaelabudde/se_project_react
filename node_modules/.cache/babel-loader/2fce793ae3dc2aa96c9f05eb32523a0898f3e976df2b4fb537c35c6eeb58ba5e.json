{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useContext } from \"react\";\nimport { CurrentUserContext } from \"../contexts/CurrentUserContext\";\nimport { AuthContext } from \"../contexts/AuthContext\";\nimport { api } from \"../utils/api\";\nimport { login as loginConfig, signup as signupConfig } from \"../utils/auth\";\nconst useAuth = (toggleModal, fetchUserInfo) => {\n  _s();\n  const {\n    setIsLoggedIn,\n    setIsLoggedInLoading\n  } = useContext(AuthContext);\n  const {\n    setCurrentUser\n  } = useContext(CurrentUserContext);\n  const [response, setResponse] = useState(\"\");\n  const handleLogIn = async ({\n    email,\n    password\n  }) => {\n    const config = loginConfig(email, password);\n    try {\n      const res = await api(\"POST\", \"/login\", \"\", config);\n\n      // Check if the response contains a token\n      if (res.token) {\n        localStorage.setItem(\"jwt\", res.token);\n\n        // Set loading to true while fetching user info\n        setIsLoggedInLoading(true);\n        setIsLoggedIn(true);\n\n        // Fetch user info and update current user\n        const userInfo = await fetchUserInfo(res.token);\n        setCurrentUser(userInfo);\n        toggleModal(\"login\");\n      } else {\n        console.error(res.message);\n        setResponse(res.message || \"Log in failed\");\n      }\n    } catch (error) {\n      console.error(\"Error during login:\", error);\n    } finally {\n      // Whether successful or not, set loading to false\n      setIsLoggedInLoading(false);\n    }\n  };\n  const handleSignUp = async ({\n    name,\n    avatar,\n    email,\n    password\n  }) => {\n    const config = signupConfig(name, avatar, email, password);\n    try {\n      const res = await api(\"POST\", \"/signup\", \"\", config);\n\n      // Check if the response is successful\n      if (res.data) {\n        // SignUp successful, proceed to login\n        await handleLogIn({\n          email,\n          password\n        });\n        toggleModal(\"signup\");\n      } else {\n        console.error(res.message);\n        setResponse(res.message || \"Sign up failed\");\n      }\n    } catch (error) {\n      console.error(\"Error during sign up:\", error);\n    }\n  };\n  const handleLogout = () => {\n    localStorage.removeItem(\"jwt\");\n    setIsLoggedIn(false);\n    setCurrentUser(null);\n    setCurrentUser({\n      avatar: \"T T\"\n    });\n    toggleModal(\"logout\");\n  };\n  return {\n    handleLogIn,\n    handleSignUp,\n    handleLogout,\n    response\n  };\n};\n_s(useAuth, \"s+6BlBQWV9d4GdhwdWCDKiNKluM=\");\nexport default useAuth;","map":{"version":3,"names":["useState","useContext","CurrentUserContext","AuthContext","api","login","loginConfig","signup","signupConfig","useAuth","toggleModal","fetchUserInfo","_s","setIsLoggedIn","setIsLoggedInLoading","setCurrentUser","response","setResponse","handleLogIn","email","password","config","res","token","localStorage","setItem","userInfo","console","error","message","handleSignUp","name","avatar","data","handleLogout","removeItem"],"sources":["/Users/michaelabudde/practicum/fullstack/se_project_react/src/hooks/useAuth.js"],"sourcesContent":["import { useState, useContext } from \"react\";\nimport { CurrentUserContext } from \"../contexts/CurrentUserContext\";\nimport { AuthContext } from \"../contexts/AuthContext\";\nimport { api } from \"../utils/api\";\nimport { login as loginConfig, signup as signupConfig } from \"../utils/auth\";\n\nconst useAuth = (toggleModal, fetchUserInfo) => {\n  const { setIsLoggedIn, setIsLoggedInLoading } = useContext(AuthContext);\n  const { setCurrentUser } = useContext(CurrentUserContext);\n  const [response, setResponse] = useState(\"\");\n\n  const handleLogIn = async ({ email, password }) => {\n    const config = loginConfig(email, password);\n    try {\n      const res = await api(\"POST\", \"/login\", \"\", config);\n\n      // Check if the response contains a token\n      if (res.token) {\n        localStorage.setItem(\"jwt\", res.token);\n\n        // Set loading to true while fetching user info\n        setIsLoggedInLoading(true);\n\n        setIsLoggedIn(true);\n\n        // Fetch user info and update current user\n        const userInfo = await fetchUserInfo(res.token);\n        setCurrentUser(userInfo);\n\n        toggleModal(\"login\");\n      } else {\n        console.error(res.message);\n        setResponse(res.message || \"Log in failed\");\n      }\n    } catch (error) {\n      console.error(\"Error during login:\", error);\n    } finally {\n      // Whether successful or not, set loading to false\n      setIsLoggedInLoading(false);\n    }\n  };\n\n  const handleSignUp = async ({ name, avatar, email, password }) => {\n    const config = signupConfig(name, avatar, email, password);\n    try {\n      const res = await api(\"POST\", \"/signup\", \"\", config);\n\n      // Check if the response is successful\n      if (res.data) {\n        // SignUp successful, proceed to login\n        await handleLogIn({ email, password });\n        toggleModal(\"signup\");\n      } else {\n        console.error(res.message);\n        setResponse(res.message || \"Sign up failed\");\n      }\n    } catch (error) {\n      console.error(\"Error during sign up:\", error);\n    }\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"jwt\");\n    setIsLoggedIn(false);\n    setCurrentUser(null);\n    setCurrentUser({ avatar: \"T T\" });\n    toggleModal(\"logout\");\n  };\n  return { handleLogIn, handleSignUp, handleLogout, response };\n};\n\nexport default useAuth;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAC5C,SAASC,kBAAkB,QAAQ,gCAAgC;AACnE,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,GAAG,QAAQ,cAAc;AAClC,SAASC,KAAK,IAAIC,WAAW,EAAEC,MAAM,IAAIC,YAAY,QAAQ,eAAe;AAE5E,MAAMC,OAAO,GAAGA,CAACC,WAAW,EAAEC,aAAa,KAAK;EAAAC,EAAA;EAC9C,MAAM;IAAEC,aAAa;IAAEC;EAAqB,CAAC,GAAGb,UAAU,CAACE,WAAW,CAAC;EACvE,MAAM;IAAEY;EAAe,CAAC,GAAGd,UAAU,CAACC,kBAAkB,CAAC;EACzD,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMkB,WAAW,GAAG,MAAAA,CAAO;IAAEC,KAAK;IAAEC;EAAS,CAAC,KAAK;IACjD,MAAMC,MAAM,GAAGf,WAAW,CAACa,KAAK,EAAEC,QAAQ,CAAC;IAC3C,IAAI;MACF,MAAME,GAAG,GAAG,MAAMlB,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAEiB,MAAM,CAAC;;MAEnD;MACA,IAAIC,GAAG,CAACC,KAAK,EAAE;QACbC,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEH,GAAG,CAACC,KAAK,CAAC;;QAEtC;QACAT,oBAAoB,CAAC,IAAI,CAAC;QAE1BD,aAAa,CAAC,IAAI,CAAC;;QAEnB;QACA,MAAMa,QAAQ,GAAG,MAAMf,aAAa,CAACW,GAAG,CAACC,KAAK,CAAC;QAC/CR,cAAc,CAACW,QAAQ,CAAC;QAExBhB,WAAW,CAAC,OAAO,CAAC;MACtB,CAAC,MAAM;QACLiB,OAAO,CAACC,KAAK,CAACN,GAAG,CAACO,OAAO,CAAC;QAC1BZ,WAAW,CAACK,GAAG,CAACO,OAAO,IAAI,eAAe,CAAC;MAC7C;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C,CAAC,SAAS;MACR;MACAd,oBAAoB,CAAC,KAAK,CAAC;IAC7B;EACF,CAAC;EAED,MAAMgB,YAAY,GAAG,MAAAA,CAAO;IAAEC,IAAI;IAAEC,MAAM;IAAEb,KAAK;IAAEC;EAAS,CAAC,KAAK;IAChE,MAAMC,MAAM,GAAGb,YAAY,CAACuB,IAAI,EAAEC,MAAM,EAAEb,KAAK,EAAEC,QAAQ,CAAC;IAC1D,IAAI;MACF,MAAME,GAAG,GAAG,MAAMlB,GAAG,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE,EAAEiB,MAAM,CAAC;;MAEpD;MACA,IAAIC,GAAG,CAACW,IAAI,EAAE;QACZ;QACA,MAAMf,WAAW,CAAC;UAAEC,KAAK;UAAEC;QAAS,CAAC,CAAC;QACtCV,WAAW,CAAC,QAAQ,CAAC;MACvB,CAAC,MAAM;QACLiB,OAAO,CAACC,KAAK,CAACN,GAAG,CAACO,OAAO,CAAC;QAC1BZ,WAAW,CAACK,GAAG,CAACO,OAAO,IAAI,gBAAgB,CAAC;MAC9C;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAED,MAAMM,YAAY,GAAGA,CAAA,KAAM;IACzBV,YAAY,CAACW,UAAU,CAAC,KAAK,CAAC;IAC9BtB,aAAa,CAAC,KAAK,CAAC;IACpBE,cAAc,CAAC,IAAI,CAAC;IACpBA,cAAc,CAAC;MAAEiB,MAAM,EAAE;IAAM,CAAC,CAAC;IACjCtB,WAAW,CAAC,QAAQ,CAAC;EACvB,CAAC;EACD,OAAO;IAAEQ,WAAW;IAAEY,YAAY;IAAEI,YAAY;IAAElB;EAAS,CAAC;AAC9D,CAAC;AAACJ,EAAA,CA/DIH,OAAO;AAiEb,eAAeA,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}