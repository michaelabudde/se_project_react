{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useContext, useEffect, useCallback } from \"react\";\nimport { CurrentUserContext } from \"../contexts/CurrentUserContext\";\nimport { AuthContext } from \"../contexts/AuthContext\";\nimport { api } from \"../utils/api\";\nimport { login as loginConfig, signup as signupConfig } from \"../utils/auth\";\nconst useAuth = toggleModal => {\n  _s();\n  const {\n    setIsLoggedIn\n  } = useContext(AuthContext);\n  const {\n    setCurrentUser\n  } = useContext(CurrentUserContext);\n  const [response, setResponse] = useState(\"\");\n  const handleLogIn = async ({\n    email,\n    password\n  }) => {\n    const config = loginConfig(email, password);\n    const res = await api(\"POST\", \"login\", \"\", config);\n\n    // Check if the response contains a token\n    if (res.token) {\n      localStorage.setItem(\"jwt\", res.token);\n      setIsLoggedIn(true);\n      fetchUserInfo(res.token);\n      toggleModal(\"login\");\n    } else {\n      console.error(res.message);\n      setResponse(res.message || \"Log in failed\");\n    }\n  };\n  const handleSignUp = async ({\n    name,\n    avatar,\n    email,\n    password\n  }) => {\n    const config = signupConfig(name, avatar, email, password);\n    const res = await api(\"POST\", \"signup\", \"\", config);\n\n    // Check if the response is successful\n    if (res.data) {\n      // SignUp successful, proceed to login\n      await handleLogIn({\n        email,\n        password\n      });\n      toggleModal(\"signup\");\n    } else {\n      console.error(res.message);\n      setResponse(res.message || \"Sign up failed\");\n    }\n  };\n  const handleLogout = () => {\n    localStorage.removeItem(\"jwt\");\n    setIsLoggedIn(false);\n    setCurrentUser(null);\n    setCurrentUser({\n      avatar: \"T T\"\n    });\n    toggleModal(\"logout\");\n  };\n  const fetchUserInfo = useCallback(async token => {\n    const response = await api(\"GET\", \"user/me\", token);\n    if (response.ok) {\n      const userInfo = await response.json();\n      setCurrentUser(userInfo);\n    } else {\n      console.error(`Can't access user. Error: ${response.status}`);\n    }\n  }, [setCurrentUser] // to update the current user state in a React context, use fetchUserInfo\n  );\n  useEffect(() => {\n    const token = localStorage.getItem(\"jwt\");\n    if (token) {\n      setIsLoggedIn(true);\n      fetchUserInfo(token);\n    }\n  }, [fetchUserInfo, setIsLoggedIn]);\n  return {\n    handleLogIn,\n    handleSignUp,\n    handleLogout,\n    response\n  };\n};\n_s(useAuth, \"Qg8+tDl8WDsz7viMGsR60Z6nik4=\");\nexport default useAuth;","map":{"version":3,"names":["useState","useContext","useEffect","useCallback","CurrentUserContext","AuthContext","api","login","loginConfig","signup","signupConfig","useAuth","toggleModal","_s","setIsLoggedIn","setCurrentUser","response","setResponse","handleLogIn","email","password","config","res","token","localStorage","setItem","fetchUserInfo","console","error","message","handleSignUp","name","avatar","data","handleLogout","removeItem","ok","userInfo","json","status","getItem"],"sources":["/Users/michaelabudde/practicum/fullstack/se_project_react/src/hooks/useAuth.js"],"sourcesContent":["import { useState, useContext, useEffect, useCallback } from \"react\";\nimport { CurrentUserContext } from \"../contexts/CurrentUserContext\";\nimport { AuthContext } from \"../contexts/AuthContext\";\nimport { api } from \"../utils/api\";\nimport { login as loginConfig, signup as signupConfig } from \"../utils/auth\";\n\nconst useAuth = (toggleModal) => {\n  const { setIsLoggedIn } = useContext(AuthContext);\n  const { setCurrentUser } = useContext(CurrentUserContext);\n  const [response, setResponse] = useState(\"\");\n\n  const handleLogIn = async ({ email, password }) => {\n    const config = loginConfig(email, password);\n    const res = await api(\"POST\", \"login\", \"\", config);\n\n    // Check if the response contains a token\n    if (res.token) {\n      localStorage.setItem(\"jwt\", res.token);\n      setIsLoggedIn(true);\n      fetchUserInfo(res.token);\n      toggleModal(\"login\");\n    } else {\n      console.error(res.message);\n      setResponse(res.message || \"Log in failed\");\n    }\n  };\n\n  const handleSignUp = async ({ name, avatar, email, password }) => {\n    const config = signupConfig(name, avatar, email, password);\n    const res = await api(\"POST\", \"signup\", \"\", config);\n\n    // Check if the response is successful\n    if (res.data) {\n      // SignUp successful, proceed to login\n      await handleLogIn({ email, password });\n      toggleModal(\"signup\");\n    } else {\n      console.error(res.message);\n      setResponse(res.message || \"Sign up failed\");\n    }\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"jwt\");\n    setIsLoggedIn(false);\n    setCurrentUser(null);\n    setCurrentUser({ avatar: \"T T\" });\n    toggleModal(\"logout\");\n  };\n\n  const fetchUserInfo = useCallback(\n    async (token) => {\n      const response = await api(\"GET\", \"user/me\", token);\n      if (response.ok) {\n        const userInfo = await response.json();\n        setCurrentUser(userInfo);\n      } else {\n        console.error(`Can't access user. Error: ${response.status}`);\n      }\n    },\n    [setCurrentUser] // to update the current user state in a React context, use fetchUserInfo\n  );\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"jwt\");\n    if (token) {\n      setIsLoggedIn(true);\n      fetchUserInfo(token);\n    }\n  }, [fetchUserInfo, setIsLoggedIn]);\n\n  return { handleLogIn, handleSignUp, handleLogout, response };\n};\nexport default useAuth;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,UAAU,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACpE,SAASC,kBAAkB,QAAQ,gCAAgC;AACnE,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,GAAG,QAAQ,cAAc;AAClC,SAASC,KAAK,IAAIC,WAAW,EAAEC,MAAM,IAAIC,YAAY,QAAQ,eAAe;AAE5E,MAAMC,OAAO,GAAIC,WAAW,IAAK;EAAAC,EAAA;EAC/B,MAAM;IAAEC;EAAc,CAAC,GAAGb,UAAU,CAACI,WAAW,CAAC;EACjD,MAAM;IAAEU;EAAe,CAAC,GAAGd,UAAU,CAACG,kBAAkB,CAAC;EACzD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMkB,WAAW,GAAG,MAAAA,CAAO;IAAEC,KAAK;IAAEC;EAAS,CAAC,KAAK;IACjD,MAAMC,MAAM,GAAGb,WAAW,CAACW,KAAK,EAAEC,QAAQ,CAAC;IAC3C,MAAME,GAAG,GAAG,MAAMhB,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE,EAAEe,MAAM,CAAC;;IAElD;IACA,IAAIC,GAAG,CAACC,KAAK,EAAE;MACbC,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEH,GAAG,CAACC,KAAK,CAAC;MACtCT,aAAa,CAAC,IAAI,CAAC;MACnBY,aAAa,CAACJ,GAAG,CAACC,KAAK,CAAC;MACxBX,WAAW,CAAC,OAAO,CAAC;IACtB,CAAC,MAAM;MACLe,OAAO,CAACC,KAAK,CAACN,GAAG,CAACO,OAAO,CAAC;MAC1BZ,WAAW,CAACK,GAAG,CAACO,OAAO,IAAI,eAAe,CAAC;IAC7C;EACF,CAAC;EAED,MAAMC,YAAY,GAAG,MAAAA,CAAO;IAAEC,IAAI;IAAEC,MAAM;IAAEb,KAAK;IAAEC;EAAS,CAAC,KAAK;IAChE,MAAMC,MAAM,GAAGX,YAAY,CAACqB,IAAI,EAAEC,MAAM,EAAEb,KAAK,EAAEC,QAAQ,CAAC;IAC1D,MAAME,GAAG,GAAG,MAAMhB,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAEe,MAAM,CAAC;;IAEnD;IACA,IAAIC,GAAG,CAACW,IAAI,EAAE;MACZ;MACA,MAAMf,WAAW,CAAC;QAAEC,KAAK;QAAEC;MAAS,CAAC,CAAC;MACtCR,WAAW,CAAC,QAAQ,CAAC;IACvB,CAAC,MAAM;MACLe,OAAO,CAACC,KAAK,CAACN,GAAG,CAACO,OAAO,CAAC;MAC1BZ,WAAW,CAACK,GAAG,CAACO,OAAO,IAAI,gBAAgB,CAAC;IAC9C;EACF,CAAC;EAED,MAAMK,YAAY,GAAGA,CAAA,KAAM;IACzBV,YAAY,CAACW,UAAU,CAAC,KAAK,CAAC;IAC9BrB,aAAa,CAAC,KAAK,CAAC;IACpBC,cAAc,CAAC,IAAI,CAAC;IACpBA,cAAc,CAAC;MAAEiB,MAAM,EAAE;IAAM,CAAC,CAAC;IACjCpB,WAAW,CAAC,QAAQ,CAAC;EACvB,CAAC;EAED,MAAMc,aAAa,GAAGvB,WAAW,CAC/B,MAAOoB,KAAK,IAAK;IACf,MAAMP,QAAQ,GAAG,MAAMV,GAAG,CAAC,KAAK,EAAE,SAAS,EAAEiB,KAAK,CAAC;IACnD,IAAIP,QAAQ,CAACoB,EAAE,EAAE;MACf,MAAMC,QAAQ,GAAG,MAAMrB,QAAQ,CAACsB,IAAI,CAAC,CAAC;MACtCvB,cAAc,CAACsB,QAAQ,CAAC;IAC1B,CAAC,MAAM;MACLV,OAAO,CAACC,KAAK,CAAE,6BAA4BZ,QAAQ,CAACuB,MAAO,EAAC,CAAC;IAC/D;EACF,CAAC,EACD,CAACxB,cAAc,CAAC,CAAC;EACnB,CAAC;EAEDb,SAAS,CAAC,MAAM;IACd,MAAMqB,KAAK,GAAGC,YAAY,CAACgB,OAAO,CAAC,KAAK,CAAC;IACzC,IAAIjB,KAAK,EAAE;MACTT,aAAa,CAAC,IAAI,CAAC;MACnBY,aAAa,CAACH,KAAK,CAAC;IACtB;EACF,CAAC,EAAE,CAACG,aAAa,EAAEZ,aAAa,CAAC,CAAC;EAElC,OAAO;IAAEI,WAAW;IAAEY,YAAY;IAAEI,YAAY;IAAElB;EAAS,CAAC;AAC9D,CAAC;AAACH,EAAA,CAlEIF,OAAO;AAmEb,eAAeA,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}